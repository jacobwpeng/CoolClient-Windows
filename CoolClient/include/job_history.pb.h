// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job_history.proto

#ifndef PROTOBUF_job_5fhistory_2eproto__INCLUDED
#define PROTOBUF_job_5fhistory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace JobHistory {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_job_5fhistory_2eproto();
void protobuf_AssignDesc_job_5fhistory_2eproto();
void protobuf_ShutdownFile_job_5fhistory_2eproto();

class FileInfo;
class JobHistoryInfo;
class History;

// ===================================================================

class FileInfo : public ::google::protobuf::Message {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfo& default_instance();

  void Swap(FileInfo* other);

  // implements Message ----------------------------------------------

  FileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Fileid = 1;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileidFieldNumber = 1;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  inline ::std::string* release_fileid();
  inline void set_allocated_fileid(::std::string* fileid);

  // required string RelativePath = 2;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativePathFieldNumber = 2;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // required string Filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // repeated uint64 FileBit = 4;
  inline int filebit_size() const;
  inline void clear_filebit();
  static const int kFileBitFieldNumber = 4;
  inline ::google::protobuf::uint64 filebit(int index) const;
  inline void set_filebit(int index, ::google::protobuf::uint64 value);
  inline void add_filebit(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      filebit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_filebit();

  // required int32 FileBitCount = 5;
  inline bool has_filebitcount() const;
  inline void clear_filebitcount();
  static const int kFileBitCountFieldNumber = 5;
  inline ::google::protobuf::int32 filebitcount() const;
  inline void set_filebitcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JobHistory.FileInfo)
 private:
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filebitcount();
  inline void clear_has_filebitcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fileid_;
  ::std::string* relativepath_;
  ::std::string* filename_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > filebit_;
  ::google::protobuf::int32 filebitcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_job_5fhistory_2eproto();
  friend void protobuf_AssignDesc_job_5fhistory_2eproto();
  friend void protobuf_ShutdownFile_job_5fhistory_2eproto();

  void InitAsDefaultInstance();
  static FileInfo* default_instance_;
};
// -------------------------------------------------------------------

class JobHistoryInfo : public ::google::protobuf::Message {
 public:
  JobHistoryInfo();
  virtual ~JobHistoryInfo();

  JobHistoryInfo(const JobHistoryInfo& from);

  inline JobHistoryInfo& operator=(const JobHistoryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobHistoryInfo& default_instance();

  void Swap(JobHistoryInfo* other);

  // implements Message ----------------------------------------------

  JobHistoryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobHistoryInfo& from);
  void MergeFrom(const JobHistoryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TorrentPath = 1;
  inline bool has_torrentpath() const;
  inline void clear_torrentpath();
  static const int kTorrentPathFieldNumber = 1;
  inline const ::std::string& torrentpath() const;
  inline void set_torrentpath(const ::std::string& value);
  inline void set_torrentpath(const char* value);
  inline void set_torrentpath(const char* value, size_t size);
  inline ::std::string* mutable_torrentpath();
  inline ::std::string* release_torrentpath();
  inline void set_allocated_torrentpath(::std::string* torrentpath);

  // required string LocalTopPath = 2;
  inline bool has_localtoppath() const;
  inline void clear_localtoppath();
  static const int kLocalTopPathFieldNumber = 2;
  inline const ::std::string& localtoppath() const;
  inline void set_localtoppath(const ::std::string& value);
  inline void set_localtoppath(const char* value);
  inline void set_localtoppath(const char* value, size_t size);
  inline ::std::string* mutable_localtoppath();
  inline ::std::string* release_localtoppath();
  inline void set_allocated_localtoppath(::std::string* localtoppath);

  // repeated .JobHistory.FileInfo File = 3;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 3;
  inline const ::JobHistory::FileInfo& file(int index) const;
  inline ::JobHistory::FileInfo* mutable_file(int index);
  inline ::JobHistory::FileInfo* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::JobHistory::FileInfo >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::JobHistory::FileInfo >*
      mutable_file();

  // required int64 UploadTotal = 4;
  inline bool has_uploadtotal() const;
  inline void clear_uploadtotal();
  static const int kUploadTotalFieldNumber = 4;
  inline ::google::protobuf::int64 uploadtotal() const;
  inline void set_uploadtotal(::google::protobuf::int64 value);

  // required int64 DownloadTotal = 5;
  inline bool has_downloadtotal() const;
  inline void clear_downloadtotal();
  static const int kDownloadTotalFieldNumber = 5;
  inline ::google::protobuf::int64 downloadtotal() const;
  inline void set_downloadtotal(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:JobHistory.JobHistoryInfo)
 private:
  inline void set_has_torrentpath();
  inline void clear_has_torrentpath();
  inline void set_has_localtoppath();
  inline void clear_has_localtoppath();
  inline void set_has_uploadtotal();
  inline void clear_has_uploadtotal();
  inline void set_has_downloadtotal();
  inline void clear_has_downloadtotal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* torrentpath_;
  ::std::string* localtoppath_;
  ::google::protobuf::RepeatedPtrField< ::JobHistory::FileInfo > file_;
  ::google::protobuf::int64 uploadtotal_;
  ::google::protobuf::int64 downloadtotal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_job_5fhistory_2eproto();
  friend void protobuf_AssignDesc_job_5fhistory_2eproto();
  friend void protobuf_ShutdownFile_job_5fhistory_2eproto();

  void InitAsDefaultInstance();
  static JobHistoryInfo* default_instance_;
};
// -------------------------------------------------------------------

class History : public ::google::protobuf::Message {
 public:
  History();
  virtual ~History();

  History(const History& from);

  inline History& operator=(const History& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const History& default_instance();

  void Swap(History* other);

  // implements Message ----------------------------------------------

  History* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const History& from);
  void MergeFrom(const History& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .JobHistory.JobHistoryInfo JobInfo = 1;
  inline int jobinfo_size() const;
  inline void clear_jobinfo();
  static const int kJobInfoFieldNumber = 1;
  inline const ::JobHistory::JobHistoryInfo& jobinfo(int index) const;
  inline ::JobHistory::JobHistoryInfo* mutable_jobinfo(int index);
  inline ::JobHistory::JobHistoryInfo* add_jobinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::JobHistory::JobHistoryInfo >&
      jobinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::JobHistory::JobHistoryInfo >*
      mutable_jobinfo();

  // @@protoc_insertion_point(class_scope:JobHistory.History)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::JobHistory::JobHistoryInfo > jobinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_job_5fhistory_2eproto();
  friend void protobuf_AssignDesc_job_5fhistory_2eproto();
  friend void protobuf_ShutdownFile_job_5fhistory_2eproto();

  void InitAsDefaultInstance();
  static History* default_instance_;
};
// ===================================================================


// ===================================================================

// FileInfo

// required string Fileid = 1;
inline bool FileInfo::has_fileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileInfo::set_has_fileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileInfo::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileInfo::clear_fileid() {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    fileid_->clear();
  }
  clear_has_fileid();
}
inline const ::std::string& FileInfo::fileid() const {
  return *fileid_;
}
inline void FileInfo::set_fileid(const ::std::string& value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void FileInfo::set_fileid(const char* value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void FileInfo::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileInfo::mutable_fileid() {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  return fileid_;
}
inline ::std::string* FileInfo::release_fileid() {
  clear_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fileid_;
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileInfo::set_allocated_fileid(::std::string* fileid) {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (fileid) {
    set_has_fileid();
    fileid_ = fileid;
  } else {
    clear_has_fileid();
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string RelativePath = 2;
inline bool FileInfo::has_relativepath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileInfo::set_has_relativepath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileInfo::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileInfo::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& FileInfo::relativepath() const {
  return *relativepath_;
}
inline void FileInfo::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
}
inline void FileInfo::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
}
inline void FileInfo::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileInfo::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  return relativepath_;
}
inline ::std::string* FileInfo::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileInfo::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Filename = 3;
inline bool FileInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileInfo::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& FileInfo::filename() const {
  return *filename_;
}
inline void FileInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileInfo::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileInfo::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* FileInfo::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileInfo::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint64 FileBit = 4;
inline int FileInfo::filebit_size() const {
  return filebit_.size();
}
inline void FileInfo::clear_filebit() {
  filebit_.Clear();
}
inline ::google::protobuf::uint64 FileInfo::filebit(int index) const {
  return filebit_.Get(index);
}
inline void FileInfo::set_filebit(int index, ::google::protobuf::uint64 value) {
  filebit_.Set(index, value);
}
inline void FileInfo::add_filebit(::google::protobuf::uint64 value) {
  filebit_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FileInfo::filebit() const {
  return filebit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FileInfo::mutable_filebit() {
  return &filebit_;
}

// required int32 FileBitCount = 5;
inline bool FileInfo::has_filebitcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileInfo::set_has_filebitcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileInfo::clear_has_filebitcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileInfo::clear_filebitcount() {
  filebitcount_ = 0;
  clear_has_filebitcount();
}
inline ::google::protobuf::int32 FileInfo::filebitcount() const {
  return filebitcount_;
}
inline void FileInfo::set_filebitcount(::google::protobuf::int32 value) {
  set_has_filebitcount();
  filebitcount_ = value;
}

// -------------------------------------------------------------------

// JobHistoryInfo

// required string TorrentPath = 1;
inline bool JobHistoryInfo::has_torrentpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobHistoryInfo::set_has_torrentpath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobHistoryInfo::clear_has_torrentpath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobHistoryInfo::clear_torrentpath() {
  if (torrentpath_ != &::google::protobuf::internal::kEmptyString) {
    torrentpath_->clear();
  }
  clear_has_torrentpath();
}
inline const ::std::string& JobHistoryInfo::torrentpath() const {
  return *torrentpath_;
}
inline void JobHistoryInfo::set_torrentpath(const ::std::string& value) {
  set_has_torrentpath();
  if (torrentpath_ == &::google::protobuf::internal::kEmptyString) {
    torrentpath_ = new ::std::string;
  }
  torrentpath_->assign(value);
}
inline void JobHistoryInfo::set_torrentpath(const char* value) {
  set_has_torrentpath();
  if (torrentpath_ == &::google::protobuf::internal::kEmptyString) {
    torrentpath_ = new ::std::string;
  }
  torrentpath_->assign(value);
}
inline void JobHistoryInfo::set_torrentpath(const char* value, size_t size) {
  set_has_torrentpath();
  if (torrentpath_ == &::google::protobuf::internal::kEmptyString) {
    torrentpath_ = new ::std::string;
  }
  torrentpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobHistoryInfo::mutable_torrentpath() {
  set_has_torrentpath();
  if (torrentpath_ == &::google::protobuf::internal::kEmptyString) {
    torrentpath_ = new ::std::string;
  }
  return torrentpath_;
}
inline ::std::string* JobHistoryInfo::release_torrentpath() {
  clear_has_torrentpath();
  if (torrentpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = torrentpath_;
    torrentpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JobHistoryInfo::set_allocated_torrentpath(::std::string* torrentpath) {
  if (torrentpath_ != &::google::protobuf::internal::kEmptyString) {
    delete torrentpath_;
  }
  if (torrentpath) {
    set_has_torrentpath();
    torrentpath_ = torrentpath;
  } else {
    clear_has_torrentpath();
    torrentpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string LocalTopPath = 2;
inline bool JobHistoryInfo::has_localtoppath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobHistoryInfo::set_has_localtoppath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobHistoryInfo::clear_has_localtoppath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobHistoryInfo::clear_localtoppath() {
  if (localtoppath_ != &::google::protobuf::internal::kEmptyString) {
    localtoppath_->clear();
  }
  clear_has_localtoppath();
}
inline const ::std::string& JobHistoryInfo::localtoppath() const {
  return *localtoppath_;
}
inline void JobHistoryInfo::set_localtoppath(const ::std::string& value) {
  set_has_localtoppath();
  if (localtoppath_ == &::google::protobuf::internal::kEmptyString) {
    localtoppath_ = new ::std::string;
  }
  localtoppath_->assign(value);
}
inline void JobHistoryInfo::set_localtoppath(const char* value) {
  set_has_localtoppath();
  if (localtoppath_ == &::google::protobuf::internal::kEmptyString) {
    localtoppath_ = new ::std::string;
  }
  localtoppath_->assign(value);
}
inline void JobHistoryInfo::set_localtoppath(const char* value, size_t size) {
  set_has_localtoppath();
  if (localtoppath_ == &::google::protobuf::internal::kEmptyString) {
    localtoppath_ = new ::std::string;
  }
  localtoppath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobHistoryInfo::mutable_localtoppath() {
  set_has_localtoppath();
  if (localtoppath_ == &::google::protobuf::internal::kEmptyString) {
    localtoppath_ = new ::std::string;
  }
  return localtoppath_;
}
inline ::std::string* JobHistoryInfo::release_localtoppath() {
  clear_has_localtoppath();
  if (localtoppath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localtoppath_;
    localtoppath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JobHistoryInfo::set_allocated_localtoppath(::std::string* localtoppath) {
  if (localtoppath_ != &::google::protobuf::internal::kEmptyString) {
    delete localtoppath_;
  }
  if (localtoppath) {
    set_has_localtoppath();
    localtoppath_ = localtoppath;
  } else {
    clear_has_localtoppath();
    localtoppath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .JobHistory.FileInfo File = 3;
inline int JobHistoryInfo::file_size() const {
  return file_.size();
}
inline void JobHistoryInfo::clear_file() {
  file_.Clear();
}
inline const ::JobHistory::FileInfo& JobHistoryInfo::file(int index) const {
  return file_.Get(index);
}
inline ::JobHistory::FileInfo* JobHistoryInfo::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::JobHistory::FileInfo* JobHistoryInfo::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::JobHistory::FileInfo >&
JobHistoryInfo::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::JobHistory::FileInfo >*
JobHistoryInfo::mutable_file() {
  return &file_;
}

// required int64 UploadTotal = 4;
inline bool JobHistoryInfo::has_uploadtotal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JobHistoryInfo::set_has_uploadtotal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JobHistoryInfo::clear_has_uploadtotal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JobHistoryInfo::clear_uploadtotal() {
  uploadtotal_ = GOOGLE_LONGLONG(0);
  clear_has_uploadtotal();
}
inline ::google::protobuf::int64 JobHistoryInfo::uploadtotal() const {
  return uploadtotal_;
}
inline void JobHistoryInfo::set_uploadtotal(::google::protobuf::int64 value) {
  set_has_uploadtotal();
  uploadtotal_ = value;
}

// required int64 DownloadTotal = 5;
inline bool JobHistoryInfo::has_downloadtotal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JobHistoryInfo::set_has_downloadtotal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JobHistoryInfo::clear_has_downloadtotal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JobHistoryInfo::clear_downloadtotal() {
  downloadtotal_ = GOOGLE_LONGLONG(0);
  clear_has_downloadtotal();
}
inline ::google::protobuf::int64 JobHistoryInfo::downloadtotal() const {
  return downloadtotal_;
}
inline void JobHistoryInfo::set_downloadtotal(::google::protobuf::int64 value) {
  set_has_downloadtotal();
  downloadtotal_ = value;
}

// -------------------------------------------------------------------

// History

// repeated .JobHistory.JobHistoryInfo JobInfo = 1;
inline int History::jobinfo_size() const {
  return jobinfo_.size();
}
inline void History::clear_jobinfo() {
  jobinfo_.Clear();
}
inline const ::JobHistory::JobHistoryInfo& History::jobinfo(int index) const {
  return jobinfo_.Get(index);
}
inline ::JobHistory::JobHistoryInfo* History::mutable_jobinfo(int index) {
  return jobinfo_.Mutable(index);
}
inline ::JobHistory::JobHistoryInfo* History::add_jobinfo() {
  return jobinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::JobHistory::JobHistoryInfo >&
History::jobinfo() const {
  return jobinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::JobHistory::JobHistoryInfo >*
History::mutable_jobinfo() {
  return &jobinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace JobHistory

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_job_5fhistory_2eproto__INCLUDED
