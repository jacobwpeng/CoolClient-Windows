// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netpack_header.proto

#ifndef PROTOBUF_netpack_5fheader_2eproto__INCLUDED
#define PROTOBUF_netpack_5fheader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_netpack_5fheader_2eproto();
void protobuf_AssignDesc_netpack_5fheader_2eproto();
void protobuf_ShutdownFile_netpack_5fheader_2eproto();

class NetPackHeader;

// ===================================================================

class NetPackHeader : public ::google::protobuf::Message {
 public:
  NetPackHeader();
  virtual ~NetPackHeader();

  NetPackHeader(const NetPackHeader& from);

  inline NetPackHeader& operator=(const NetPackHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetPackHeader& default_instance();

  void Swap(NetPackHeader* other);

  // implements Message ----------------------------------------------

  NetPackHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetPackHeader& from);
  void MergeFrom(const NetPackHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 payloadType = 1;
  inline bool has_payloadtype() const;
  inline void clear_payloadtype();
  static const int kPayloadTypeFieldNumber = 1;
  inline ::google::protobuf::int32 payloadtype() const;
  inline void set_payloadtype(::google::protobuf::int32 value);

  // optional int32 payloadLength = 2;
  inline bool has_payloadlength() const;
  inline void clear_payloadlength();
  static const int kPayloadLengthFieldNumber = 2;
  inline ::google::protobuf::int32 payloadlength() const;
  inline void set_payloadlength(::google::protobuf::int32 value);

  // optional string messageName = 3;
  inline bool has_messagename() const;
  inline void clear_messagename();
  static const int kMessageNameFieldNumber = 3;
  inline const ::std::string& messagename() const;
  inline void set_messagename(const ::std::string& value);
  inline void set_messagename(const char* value);
  inline void set_messagename(const char* value, size_t size);
  inline ::std::string* mutable_messagename();
  inline ::std::string* release_messagename();
  inline void set_allocated_messagename(::std::string* messagename);

  // @@protoc_insertion_point(class_scope:NetPackHeader)
 private:
  inline void set_has_payloadtype();
  inline void clear_has_payloadtype();
  inline void set_has_payloadlength();
  inline void clear_has_payloadlength();
  inline void set_has_messagename();
  inline void clear_has_messagename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 payloadtype_;
  ::google::protobuf::int32 payloadlength_;
  ::std::string* messagename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_netpack_5fheader_2eproto();
  friend void protobuf_AssignDesc_netpack_5fheader_2eproto();
  friend void protobuf_ShutdownFile_netpack_5fheader_2eproto();

  void InitAsDefaultInstance();
  static NetPackHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// NetPackHeader

// optional int32 payloadType = 1;
inline bool NetPackHeader::has_payloadtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetPackHeader::set_has_payloadtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetPackHeader::clear_has_payloadtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetPackHeader::clear_payloadtype() {
  payloadtype_ = 0;
  clear_has_payloadtype();
}
inline ::google::protobuf::int32 NetPackHeader::payloadtype() const {
  return payloadtype_;
}
inline void NetPackHeader::set_payloadtype(::google::protobuf::int32 value) {
  set_has_payloadtype();
  payloadtype_ = value;
}

// optional int32 payloadLength = 2;
inline bool NetPackHeader::has_payloadlength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetPackHeader::set_has_payloadlength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetPackHeader::clear_has_payloadlength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetPackHeader::clear_payloadlength() {
  payloadlength_ = 0;
  clear_has_payloadlength();
}
inline ::google::protobuf::int32 NetPackHeader::payloadlength() const {
  return payloadlength_;
}
inline void NetPackHeader::set_payloadlength(::google::protobuf::int32 value) {
  set_has_payloadlength();
  payloadlength_ = value;
}

// optional string messageName = 3;
inline bool NetPackHeader::has_messagename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetPackHeader::set_has_messagename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetPackHeader::clear_has_messagename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetPackHeader::clear_messagename() {
  if (messagename_ != &::google::protobuf::internal::kEmptyString) {
    messagename_->clear();
  }
  clear_has_messagename();
}
inline const ::std::string& NetPackHeader::messagename() const {
  return *messagename_;
}
inline void NetPackHeader::set_messagename(const ::std::string& value) {
  set_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    messagename_ = new ::std::string;
  }
  messagename_->assign(value);
}
inline void NetPackHeader::set_messagename(const char* value) {
  set_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    messagename_ = new ::std::string;
  }
  messagename_->assign(value);
}
inline void NetPackHeader::set_messagename(const char* value, size_t size) {
  set_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    messagename_ = new ::std::string;
  }
  messagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetPackHeader::mutable_messagename() {
  set_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    messagename_ = new ::std::string;
  }
  return messagename_;
}
inline ::std::string* NetPackHeader::release_messagename() {
  clear_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messagename_;
    messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetPackHeader::set_allocated_messagename(::std::string* messagename) {
  if (messagename_ != &::google::protobuf::internal::kEmptyString) {
    delete messagename_;
  }
  if (messagename) {
    set_has_messagename();
    messagename_ = messagename;
  } else {
    clear_has_messagename();
    messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_netpack_5fheader_2eproto__INCLUDED
