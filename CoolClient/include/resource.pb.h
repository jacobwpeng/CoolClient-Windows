// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource.proto

#ifndef PROTOBUF_resource_2eproto__INCLUDED
#define PROTOBUF_resource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_resource_2eproto();
void protobuf_AssignDesc_resource_2eproto();
void protobuf_ShutdownFile_resource_2eproto();

class Ask;
class Reply;
class Info;

// ===================================================================

class Ask : public ::google::protobuf::Message {
 public:
  Ask();
  virtual ~Ask();

  Ask(const Ask& from);

  inline Ask& operator=(const Ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ask& default_instance();

  void Swap(Ask* other);

  // implements Message ----------------------------------------------

  Ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ask& from);
  void MergeFrom(const Ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int32 counta = 4;
  inline bool has_counta() const;
  inline void clear_counta();
  static const int kCountaFieldNumber = 4;
  inline ::google::protobuf::int32 counta() const;
  inline void set_counta(::google::protobuf::int32 value);

  // optional int32 countb = 5;
  inline bool has_countb() const;
  inline void clear_countb();
  static const int kCountbFieldNumber = 5;
  inline ::google::protobuf::int32 countb() const;
  inline void set_countb(::google::protobuf::int32 value);

  // optional int32 fileid = 6;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileidFieldNumber = 6;
  inline ::google::protobuf::int32 fileid() const;
  inline void set_fileid(::google::protobuf::int32 value);

  // optional string seed = 7;
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 7;
  inline const ::std::string& seed() const;
  inline void set_seed(const ::std::string& value);
  inline void set_seed(const char* value);
  inline void set_seed(const char* value, size_t size);
  inline ::std::string* mutable_seed();
  inline ::std::string* release_seed();
  inline void set_allocated_seed(::std::string* seed);

  // optional string brief = 8;
  inline bool has_brief() const;
  inline void clear_brief();
  static const int kBriefFieldNumber = 8;
  inline const ::std::string& brief() const;
  inline void set_brief(const ::std::string& value);
  inline void set_brief(const char* value);
  inline void set_brief(const char* value, size_t size);
  inline ::std::string* mutable_brief();
  inline ::std::string* release_brief();
  inline void set_allocated_brief(::std::string* brief);

  // optional int64 size = 9;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 9;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Ask)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_counta();
  inline void clear_has_counta();
  inline void set_has_countb();
  inline void clear_has_countb();
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_seed();
  inline void clear_has_seed();
  inline void set_has_brief();
  inline void clear_has_brief();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 type_;
  ::std::string* key_;
  ::google::protobuf::int32 counta_;
  ::google::protobuf::int32 countb_;
  ::std::string* seed_;
  ::std::string* brief_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int32 fileid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();

  void InitAsDefaultInstance();
  static Ask* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // required bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // repeated .Info info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Info& info(int index) const;
  inline ::Info* mutable_info(int index);
  inline ::Info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::Info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::Info >*
      mutable_info();

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional string brief = 5;
  inline bool has_brief() const;
  inline void clear_brief();
  static const int kBriefFieldNumber = 5;
  inline const ::std::string& brief() const;
  inline void set_brief(const ::std::string& value);
  inline void set_brief(const char* value);
  inline void set_brief(const char* value, size_t size);
  inline ::std::string* mutable_brief();
  inline ::std::string* release_brief();
  inline void set_allocated_brief(::std::string* brief);

  // optional string seed = 6;
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 6;
  inline const ::std::string& seed() const;
  inline void set_seed(const ::std::string& value);
  inline void set_seed(const char* value);
  inline void set_seed(const char* value, size_t size);
  inline ::std::string* mutable_seed();
  inline ::std::string* release_seed();
  inline void set_allocated_seed(::std::string* seed);

  // @@protoc_insertion_point(class_scope:Reply)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_brief();
  inline void clear_has_brief();
  inline void set_has_seed();
  inline void clear_has_seed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;
  bool flag_;
  ::google::protobuf::RepeatedPtrField< ::Info > info_;
  ::std::string* brief_;
  ::std::string* seed_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// -------------------------------------------------------------------

class Info : public ::google::protobuf::Message {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();

  void Swap(Info* other);

  // implements Message ----------------------------------------------

  Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // required int32 fileid = 3;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileidFieldNumber = 3;
  inline ::google::protobuf::int32 fileid() const;
  inline void set_fileid(::google::protobuf::int32 value);

  // required int64 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // required int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Info)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;
  ::std::string* time_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int32 fileid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_resource_2eproto();
  friend void protobuf_AssignDesc_resource_2eproto();
  friend void protobuf_ShutdownFile_resource_2eproto();

  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// ===================================================================


// ===================================================================

// Ask

// required int32 num = 1;
inline bool Ask::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ask::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ask::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ask::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Ask::num() const {
  return num_;
}
inline void Ask::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 type = 2;
inline bool Ask::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ask::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ask::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ask::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Ask::type() const {
  return type_;
}
inline void Ask::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string key = 3;
inline bool Ask::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ask::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ask::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ask::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Ask::key() const {
  return *key_;
}
inline void Ask::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Ask::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Ask::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ask::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Ask::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ask::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 counta = 4;
inline bool Ask::has_counta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ask::set_has_counta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ask::clear_has_counta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ask::clear_counta() {
  counta_ = 0;
  clear_has_counta();
}
inline ::google::protobuf::int32 Ask::counta() const {
  return counta_;
}
inline void Ask::set_counta(::google::protobuf::int32 value) {
  set_has_counta();
  counta_ = value;
}

// optional int32 countb = 5;
inline bool Ask::has_countb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ask::set_has_countb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ask::clear_has_countb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ask::clear_countb() {
  countb_ = 0;
  clear_has_countb();
}
inline ::google::protobuf::int32 Ask::countb() const {
  return countb_;
}
inline void Ask::set_countb(::google::protobuf::int32 value) {
  set_has_countb();
  countb_ = value;
}

// optional int32 fileid = 6;
inline bool Ask::has_fileid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ask::set_has_fileid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ask::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ask::clear_fileid() {
  fileid_ = 0;
  clear_has_fileid();
}
inline ::google::protobuf::int32 Ask::fileid() const {
  return fileid_;
}
inline void Ask::set_fileid(::google::protobuf::int32 value) {
  set_has_fileid();
  fileid_ = value;
}

// optional string seed = 7;
inline bool Ask::has_seed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ask::set_has_seed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ask::clear_has_seed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ask::clear_seed() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    seed_->clear();
  }
  clear_has_seed();
}
inline const ::std::string& Ask::seed() const {
  return *seed_;
}
inline void Ask::set_seed(const ::std::string& value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void Ask::set_seed(const char* value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void Ask::set_seed(const char* value, size_t size) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ask::mutable_seed() {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  return seed_;
}
inline ::std::string* Ask::release_seed() {
  clear_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seed_;
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ask::set_allocated_seed(::std::string* seed) {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (seed) {
    set_has_seed();
    seed_ = seed;
  } else {
    clear_has_seed();
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string brief = 8;
inline bool Ask::has_brief() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ask::set_has_brief() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ask::clear_has_brief() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ask::clear_brief() {
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    brief_->clear();
  }
  clear_has_brief();
}
inline const ::std::string& Ask::brief() const {
  return *brief_;
}
inline void Ask::set_brief(const ::std::string& value) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(value);
}
inline void Ask::set_brief(const char* value) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(value);
}
inline void Ask::set_brief(const char* value, size_t size) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ask::mutable_brief() {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  return brief_;
}
inline ::std::string* Ask::release_brief() {
  clear_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brief_;
    brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ask::set_allocated_brief(::std::string* brief) {
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    delete brief_;
  }
  if (brief) {
    set_has_brief();
    brief_ = brief;
  } else {
    clear_has_brief();
    brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 size = 9;
inline bool Ask::has_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ask::set_has_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ask::clear_has_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ask::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 Ask::size() const {
  return size_;
}
inline void Ask::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// Reply

// required int32 num = 1;
inline bool Reply::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Reply::num() const {
  return num_;
}
inline void Reply::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required bool flag = 2;
inline bool Reply::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reply::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reply::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reply::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool Reply::flag() const {
  return flag_;
}
inline void Reply::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// repeated .Info info = 3;
inline int Reply::info_size() const {
  return info_.size();
}
inline void Reply::clear_info() {
  info_.Clear();
}
inline const ::Info& Reply::info(int index) const {
  return info_.Get(index);
}
inline ::Info* Reply::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::Info* Reply::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Info >&
Reply::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::Info >*
Reply::mutable_info() {
  return &info_;
}

// optional int32 count = 4;
inline bool Reply::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Reply::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Reply::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Reply::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 Reply::count() const {
  return count_;
}
inline void Reply::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional string brief = 5;
inline bool Reply::has_brief() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Reply::set_has_brief() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Reply::clear_has_brief() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Reply::clear_brief() {
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    brief_->clear();
  }
  clear_has_brief();
}
inline const ::std::string& Reply::brief() const {
  return *brief_;
}
inline void Reply::set_brief(const ::std::string& value) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(value);
}
inline void Reply::set_brief(const char* value) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(value);
}
inline void Reply::set_brief(const char* value, size_t size) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Reply::mutable_brief() {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  return brief_;
}
inline ::std::string* Reply::release_brief() {
  clear_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brief_;
    brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Reply::set_allocated_brief(::std::string* brief) {
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    delete brief_;
  }
  if (brief) {
    set_has_brief();
    brief_ = brief;
  } else {
    clear_has_brief();
    brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string seed = 6;
inline bool Reply::has_seed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Reply::set_has_seed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Reply::clear_has_seed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Reply::clear_seed() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    seed_->clear();
  }
  clear_has_seed();
}
inline const ::std::string& Reply::seed() const {
  return *seed_;
}
inline void Reply::set_seed(const ::std::string& value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void Reply::set_seed(const char* value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void Reply::set_seed(const char* value, size_t size) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Reply::mutable_seed() {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  return seed_;
}
inline ::std::string* Reply::release_seed() {
  clear_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seed_;
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Reply::set_allocated_seed(::std::string* seed) {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (seed) {
    set_has_seed();
    seed_ = seed;
  } else {
    clear_has_seed();
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Info

// required string filename = 1;
inline bool Info::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& Info::filename() const {
  return *filename_;
}
inline void Info::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void Info::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void Info::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* Info::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Info::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string time = 2;
inline bool Info::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& Info::time() const {
  return *time_;
}
inline void Info::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Info::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Info::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Info::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* Info::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Info::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 fileid = 3;
inline bool Info::has_fileid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info::set_has_fileid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info::clear_fileid() {
  fileid_ = 0;
  clear_has_fileid();
}
inline ::google::protobuf::int32 Info::fileid() const {
  return fileid_;
}
inline void Info::set_fileid(::google::protobuf::int32 value) {
  set_has_fileid();
  fileid_ = value;
}

// required int64 size = 4;
inline bool Info::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Info::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Info::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Info::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 Info::size() const {
  return size_;
}
inline void Info::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
}

// required int32 type = 5;
inline bool Info::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Info::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Info::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Info::type() const {
  return type_;
}
inline void Info::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resource_2eproto__INCLUDED
