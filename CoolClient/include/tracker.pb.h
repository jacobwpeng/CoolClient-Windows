// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker.proto

#ifndef PROTOBUF_tracker_2eproto__INCLUDED
#define PROTOBUF_tracker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TrackerProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tracker_2eproto();
void protobuf_AssignDesc_tracker_2eproto();
void protobuf_ShutdownFile_tracker_2eproto();

class Peer;
class PeerFileInfo;
class QueryPeer;
class QueryPeerReply;
class Login;
class Logout;
class ReportProgress;
class PublishResource;
class MessageReply;

// ===================================================================

class Peer : public ::google::protobuf::Message {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  void Swap(Peer* other);

  // implements Message ----------------------------------------------

  Peer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ClientId = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  inline void set_allocated_clientid(::std::string* clientid);

  // required string Ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 MessagePort = 3;
  inline bool has_messageport() const;
  inline void clear_messageport();
  static const int kMessagePortFieldNumber = 3;
  inline ::google::protobuf::int32 messageport() const;
  inline void set_messageport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrackerProto.Peer)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_messageport();
  inline void clear_has_messageport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientid_;
  ::std::string* ip_;
  ::google::protobuf::int32 messageport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static Peer* default_instance_;
};
// -------------------------------------------------------------------

class PeerFileInfo : public ::google::protobuf::Message {
 public:
  PeerFileInfo();
  virtual ~PeerFileInfo();

  PeerFileInfo(const PeerFileInfo& from);

  inline PeerFileInfo& operator=(const PeerFileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerFileInfo& default_instance();

  void Swap(PeerFileInfo* other);

  // implements Message ----------------------------------------------

  PeerFileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerFileInfo& from);
  void MergeFrom(const PeerFileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TrackerProto.Peer Client = 1;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 1;
  inline const ::TrackerProto::Peer& client() const;
  inline ::TrackerProto::Peer* mutable_client();
  inline ::TrackerProto::Peer* release_client();
  inline void set_allocated_client(::TrackerProto::Peer* client);

  // required int32 Percentage = 2;
  inline bool has_percentage() const;
  inline void clear_percentage();
  static const int kPercentageFieldNumber = 2;
  inline ::google::protobuf::int32 percentage() const;
  inline void set_percentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrackerProto.PeerFileInfo)
 private:
  inline void set_has_client();
  inline void clear_has_client();
  inline void set_has_percentage();
  inline void clear_has_percentage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TrackerProto::Peer* client_;
  ::google::protobuf::int32 percentage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static PeerFileInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryPeer : public ::google::protobuf::Message {
 public:
  QueryPeer();
  virtual ~QueryPeer();

  QueryPeer(const QueryPeer& from);

  inline QueryPeer& operator=(const QueryPeer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPeer& default_instance();

  void Swap(QueryPeer* other);

  // implements Message ----------------------------------------------

  QueryPeer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPeer& from);
  void MergeFrom(const QueryPeer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string FileId = 1;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 1;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  inline ::std::string* release_fileid();
  inline void set_allocated_fileid(::std::string* fileid);

  // required int32 Percentage = 2;
  inline bool has_percentage() const;
  inline void clear_percentage();
  static const int kPercentageFieldNumber = 2;
  inline ::google::protobuf::int32 percentage() const;
  inline void set_percentage(::google::protobuf::int32 value);

  // optional int32 NeedCount = 3 [default = 20];
  inline bool has_needcount() const;
  inline void clear_needcount();
  static const int kNeedCountFieldNumber = 3;
  inline ::google::protobuf::int32 needcount() const;
  inline void set_needcount(::google::protobuf::int32 value);

  // repeated string OwnedClients = 4;
  inline int ownedclients_size() const;
  inline void clear_ownedclients();
  static const int kOwnedClientsFieldNumber = 4;
  inline const ::std::string& ownedclients(int index) const;
  inline ::std::string* mutable_ownedclients(int index);
  inline void set_ownedclients(int index, const ::std::string& value);
  inline void set_ownedclients(int index, const char* value);
  inline void set_ownedclients(int index, const char* value, size_t size);
  inline ::std::string* add_ownedclients();
  inline void add_ownedclients(const ::std::string& value);
  inline void add_ownedclients(const char* value);
  inline void add_ownedclients(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ownedclients() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ownedclients();

  // @@protoc_insertion_point(class_scope:TrackerProto.QueryPeer)
 private:
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_percentage();
  inline void clear_has_percentage();
  inline void set_has_needcount();
  inline void clear_has_needcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fileid_;
  ::google::protobuf::int32 percentage_;
  ::google::protobuf::int32 needcount_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ownedclients_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static QueryPeer* default_instance_;
};
// -------------------------------------------------------------------

class QueryPeerReply : public ::google::protobuf::Message {
 public:
  QueryPeerReply();
  virtual ~QueryPeerReply();

  QueryPeerReply(const QueryPeerReply& from);

  inline QueryPeerReply& operator=(const QueryPeerReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPeerReply& default_instance();

  void Swap(QueryPeerReply* other);

  // implements Message ----------------------------------------------

  QueryPeerReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPeerReply& from);
  void MergeFrom(const QueryPeerReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ReturnCode = 1;
  inline bool has_returncode() const;
  inline void clear_returncode();
  static const int kReturnCodeFieldNumber = 1;
  inline ::google::protobuf::int32 returncode() const;
  inline void set_returncode(::google::protobuf::int32 value);

  // required string FileId = 2;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 2;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  inline ::std::string* release_fileid();
  inline void set_allocated_fileid(::std::string* fileid);

  // required int32 Count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .TrackerProto.PeerFileInfo Info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::TrackerProto::PeerFileInfo& info(int index) const;
  inline ::TrackerProto::PeerFileInfo* mutable_info(int index);
  inline ::TrackerProto::PeerFileInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TrackerProto::PeerFileInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TrackerProto::PeerFileInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:TrackerProto.QueryPeerReply)
 private:
  inline void set_has_returncode();
  inline void clear_has_returncode();
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fileid_;
  ::google::protobuf::int32 returncode_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::TrackerProto::PeerFileInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static QueryPeerReply* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ClientId = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  inline void set_allocated_clientid(::std::string* clientid);

  // optional string LoginIp = 2;
  inline bool has_loginip() const;
  inline void clear_loginip();
  static const int kLoginIpFieldNumber = 2;
  inline const ::std::string& loginip() const;
  inline void set_loginip(const ::std::string& value);
  inline void set_loginip(const char* value);
  inline void set_loginip(const char* value, size_t size);
  inline ::std::string* mutable_loginip();
  inline ::std::string* release_loginip();
  inline void set_allocated_loginip(::std::string* loginip);

  // optional int32 MessagePort = 3 [default = 9025];
  inline bool has_messageport() const;
  inline void clear_messageport();
  static const int kMessagePortFieldNumber = 3;
  inline ::google::protobuf::int32 messageport() const;
  inline void set_messageport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrackerProto.Login)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_loginip();
  inline void clear_has_loginip();
  inline void set_has_messageport();
  inline void clear_has_messageport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientid_;
  ::std::string* loginip_;
  ::google::protobuf::int32 messageport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message {
 public:
  Logout();
  virtual ~Logout();

  Logout(const Logout& from);

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();

  void Swap(Logout* other);

  // implements Message ----------------------------------------------

  Logout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ClientId = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  inline void set_allocated_clientid(::std::string* clientid);

  // @@protoc_insertion_point(class_scope:TrackerProto.Logout)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static Logout* default_instance_;
};
// -------------------------------------------------------------------

class ReportProgress : public ::google::protobuf::Message {
 public:
  ReportProgress();
  virtual ~ReportProgress();

  ReportProgress(const ReportProgress& from);

  inline ReportProgress& operator=(const ReportProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportProgress& default_instance();

  void Swap(ReportProgress* other);

  // implements Message ----------------------------------------------

  ReportProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportProgress& from);
  void MergeFrom(const ReportProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ClientId = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  inline void set_allocated_clientid(::std::string* clientid);

  // required string FileId = 2;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 2;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  inline ::std::string* release_fileid();
  inline void set_allocated_fileid(::std::string* fileid);

  // required int32 Percentage = 3;
  inline bool has_percentage() const;
  inline void clear_percentage();
  static const int kPercentageFieldNumber = 3;
  inline ::google::protobuf::int32 percentage() const;
  inline void set_percentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrackerProto.ReportProgress)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_percentage();
  inline void clear_has_percentage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientid_;
  ::std::string* fileid_;
  ::google::protobuf::int32 percentage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static ReportProgress* default_instance_;
};
// -------------------------------------------------------------------

class PublishResource : public ::google::protobuf::Message {
 public:
  PublishResource();
  virtual ~PublishResource();

  PublishResource(const PublishResource& from);

  inline PublishResource& operator=(const PublishResource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishResource& default_instance();

  void Swap(PublishResource* other);

  // implements Message ----------------------------------------------

  PublishResource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishResource& from);
  void MergeFrom(const PublishResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ClientId = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  inline void set_allocated_clientid(::std::string* clientid);

  // required string FileId = 2;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 2;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  inline ::std::string* release_fileid();
  inline void set_allocated_fileid(::std::string* fileid);

  // @@protoc_insertion_point(class_scope:TrackerProto.PublishResource)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_fileid();
  inline void clear_has_fileid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientid_;
  ::std::string* fileid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static PublishResource* default_instance_;
};
// -------------------------------------------------------------------

class MessageReply : public ::google::protobuf::Message {
 public:
  MessageReply();
  virtual ~MessageReply();

  MessageReply(const MessageReply& from);

  inline MessageReply& operator=(const MessageReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageReply& default_instance();

  void Swap(MessageReply* other);

  // implements Message ----------------------------------------------

  MessageReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageReply& from);
  void MergeFrom(const MessageReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ReturnCode = 1;
  inline bool has_returncode() const;
  inline void clear_returncode();
  static const int kReturnCodeFieldNumber = 1;
  inline ::google::protobuf::int32 returncode() const;
  inline void set_returncode(::google::protobuf::int32 value);

  // optional string Message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:TrackerProto.MessageReply)
 private:
  inline void set_has_returncode();
  inline void clear_has_returncode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::int32 returncode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static MessageReply* default_instance_;
};
// ===================================================================


// ===================================================================

// Peer

// required string ClientId = 1;
inline bool Peer::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Peer::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Peer::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Peer::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& Peer::clientid() const {
  return *clientid_;
}
inline void Peer::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void Peer::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void Peer::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Peer::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  return clientid_;
}
inline ::std::string* Peer::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Peer::set_allocated_clientid(::std::string* clientid) {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (clientid) {
    set_has_clientid();
    clientid_ = clientid;
  } else {
    clear_has_clientid();
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Ip = 2;
inline bool Peer::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Peer::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Peer::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Peer::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Peer::ip() const {
  return *ip_;
}
inline void Peer::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Peer::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Peer::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Peer::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Peer::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Peer::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 MessagePort = 3;
inline bool Peer::has_messageport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Peer::set_has_messageport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Peer::clear_has_messageport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Peer::clear_messageport() {
  messageport_ = 0;
  clear_has_messageport();
}
inline ::google::protobuf::int32 Peer::messageport() const {
  return messageport_;
}
inline void Peer::set_messageport(::google::protobuf::int32 value) {
  set_has_messageport();
  messageport_ = value;
}

// -------------------------------------------------------------------

// PeerFileInfo

// required .TrackerProto.Peer Client = 1;
inline bool PeerFileInfo::has_client() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerFileInfo::set_has_client() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerFileInfo::clear_has_client() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerFileInfo::clear_client() {
  if (client_ != NULL) client_->::TrackerProto::Peer::Clear();
  clear_has_client();
}
inline const ::TrackerProto::Peer& PeerFileInfo::client() const {
  return client_ != NULL ? *client_ : *default_instance_->client_;
}
inline ::TrackerProto::Peer* PeerFileInfo::mutable_client() {
  set_has_client();
  if (client_ == NULL) client_ = new ::TrackerProto::Peer;
  return client_;
}
inline ::TrackerProto::Peer* PeerFileInfo::release_client() {
  clear_has_client();
  ::TrackerProto::Peer* temp = client_;
  client_ = NULL;
  return temp;
}
inline void PeerFileInfo::set_allocated_client(::TrackerProto::Peer* client) {
  delete client_;
  client_ = client;
  if (client) {
    set_has_client();
  } else {
    clear_has_client();
  }
}

// required int32 Percentage = 2;
inline bool PeerFileInfo::has_percentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeerFileInfo::set_has_percentage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeerFileInfo::clear_has_percentage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeerFileInfo::clear_percentage() {
  percentage_ = 0;
  clear_has_percentage();
}
inline ::google::protobuf::int32 PeerFileInfo::percentage() const {
  return percentage_;
}
inline void PeerFileInfo::set_percentage(::google::protobuf::int32 value) {
  set_has_percentage();
  percentage_ = value;
}

// -------------------------------------------------------------------

// QueryPeer

// required string FileId = 1;
inline bool QueryPeer::has_fileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPeer::set_has_fileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPeer::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPeer::clear_fileid() {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    fileid_->clear();
  }
  clear_has_fileid();
}
inline const ::std::string& QueryPeer::fileid() const {
  return *fileid_;
}
inline void QueryPeer::set_fileid(const ::std::string& value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void QueryPeer::set_fileid(const char* value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void QueryPeer::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPeer::mutable_fileid() {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  return fileid_;
}
inline ::std::string* QueryPeer::release_fileid() {
  clear_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fileid_;
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryPeer::set_allocated_fileid(::std::string* fileid) {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (fileid) {
    set_has_fileid();
    fileid_ = fileid;
  } else {
    clear_has_fileid();
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Percentage = 2;
inline bool QueryPeer::has_percentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryPeer::set_has_percentage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryPeer::clear_has_percentage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryPeer::clear_percentage() {
  percentage_ = 0;
  clear_has_percentage();
}
inline ::google::protobuf::int32 QueryPeer::percentage() const {
  return percentage_;
}
inline void QueryPeer::set_percentage(::google::protobuf::int32 value) {
  set_has_percentage();
  percentage_ = value;
}

// optional int32 NeedCount = 3 [default = 20];
inline bool QueryPeer::has_needcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryPeer::set_has_needcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryPeer::clear_has_needcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryPeer::clear_needcount() {
  needcount_ = 20;
  clear_has_needcount();
}
inline ::google::protobuf::int32 QueryPeer::needcount() const {
  return needcount_;
}
inline void QueryPeer::set_needcount(::google::protobuf::int32 value) {
  set_has_needcount();
  needcount_ = value;
}

// repeated string OwnedClients = 4;
inline int QueryPeer::ownedclients_size() const {
  return ownedclients_.size();
}
inline void QueryPeer::clear_ownedclients() {
  ownedclients_.Clear();
}
inline const ::std::string& QueryPeer::ownedclients(int index) const {
  return ownedclients_.Get(index);
}
inline ::std::string* QueryPeer::mutable_ownedclients(int index) {
  return ownedclients_.Mutable(index);
}
inline void QueryPeer::set_ownedclients(int index, const ::std::string& value) {
  ownedclients_.Mutable(index)->assign(value);
}
inline void QueryPeer::set_ownedclients(int index, const char* value) {
  ownedclients_.Mutable(index)->assign(value);
}
inline void QueryPeer::set_ownedclients(int index, const char* value, size_t size) {
  ownedclients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPeer::add_ownedclients() {
  return ownedclients_.Add();
}
inline void QueryPeer::add_ownedclients(const ::std::string& value) {
  ownedclients_.Add()->assign(value);
}
inline void QueryPeer::add_ownedclients(const char* value) {
  ownedclients_.Add()->assign(value);
}
inline void QueryPeer::add_ownedclients(const char* value, size_t size) {
  ownedclients_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryPeer::ownedclients() const {
  return ownedclients_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryPeer::mutable_ownedclients() {
  return &ownedclients_;
}

// -------------------------------------------------------------------

// QueryPeerReply

// required int32 ReturnCode = 1;
inline bool QueryPeerReply::has_returncode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPeerReply::set_has_returncode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPeerReply::clear_has_returncode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPeerReply::clear_returncode() {
  returncode_ = 0;
  clear_has_returncode();
}
inline ::google::protobuf::int32 QueryPeerReply::returncode() const {
  return returncode_;
}
inline void QueryPeerReply::set_returncode(::google::protobuf::int32 value) {
  set_has_returncode();
  returncode_ = value;
}

// required string FileId = 2;
inline bool QueryPeerReply::has_fileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryPeerReply::set_has_fileid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryPeerReply::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryPeerReply::clear_fileid() {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    fileid_->clear();
  }
  clear_has_fileid();
}
inline const ::std::string& QueryPeerReply::fileid() const {
  return *fileid_;
}
inline void QueryPeerReply::set_fileid(const ::std::string& value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void QueryPeerReply::set_fileid(const char* value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void QueryPeerReply::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPeerReply::mutable_fileid() {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  return fileid_;
}
inline ::std::string* QueryPeerReply::release_fileid() {
  clear_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fileid_;
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryPeerReply::set_allocated_fileid(::std::string* fileid) {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (fileid) {
    set_has_fileid();
    fileid_ = fileid;
  } else {
    clear_has_fileid();
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Count = 3;
inline bool QueryPeerReply::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryPeerReply::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryPeerReply::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryPeerReply::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 QueryPeerReply::count() const {
  return count_;
}
inline void QueryPeerReply::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .TrackerProto.PeerFileInfo Info = 4;
inline int QueryPeerReply::info_size() const {
  return info_.size();
}
inline void QueryPeerReply::clear_info() {
  info_.Clear();
}
inline const ::TrackerProto::PeerFileInfo& QueryPeerReply::info(int index) const {
  return info_.Get(index);
}
inline ::TrackerProto::PeerFileInfo* QueryPeerReply::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TrackerProto::PeerFileInfo* QueryPeerReply::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TrackerProto::PeerFileInfo >&
QueryPeerReply::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TrackerProto::PeerFileInfo >*
QueryPeerReply::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// Login

// required string ClientId = 1;
inline bool Login::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& Login::clientid() const {
  return *clientid_;
}
inline void Login::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void Login::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void Login::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  return clientid_;
}
inline ::std::string* Login::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_clientid(::std::string* clientid) {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (clientid) {
    set_has_clientid();
    clientid_ = clientid;
  } else {
    clear_has_clientid();
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string LoginIp = 2;
inline bool Login::has_loginip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_loginip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_loginip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_loginip() {
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    loginip_->clear();
  }
  clear_has_loginip();
}
inline const ::std::string& Login::loginip() const {
  return *loginip_;
}
inline void Login::set_loginip(const ::std::string& value) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void Login::set_loginip(const char* value) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void Login::set_loginip(const char* value, size_t size) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_loginip() {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  return loginip_;
}
inline ::std::string* Login::release_loginip() {
  clear_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = loginip_;
    loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_loginip(::std::string* loginip) {
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (loginip) {
    set_has_loginip();
    loginip_ = loginip;
  } else {
    clear_has_loginip();
    loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 MessagePort = 3 [default = 9025];
inline bool Login::has_messageport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::set_has_messageport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login::clear_has_messageport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login::clear_messageport() {
  messageport_ = 9025;
  clear_has_messageport();
}
inline ::google::protobuf::int32 Login::messageport() const {
  return messageport_;
}
inline void Login::set_messageport(::google::protobuf::int32 value) {
  set_has_messageport();
  messageport_ = value;
}

// -------------------------------------------------------------------

// Logout

// required string ClientId = 1;
inline bool Logout::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Logout::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Logout::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Logout::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& Logout::clientid() const {
  return *clientid_;
}
inline void Logout::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void Logout::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void Logout::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logout::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  return clientid_;
}
inline ::std::string* Logout::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Logout::set_allocated_clientid(::std::string* clientid) {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (clientid) {
    set_has_clientid();
    clientid_ = clientid;
  } else {
    clear_has_clientid();
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReportProgress

// required string ClientId = 1;
inline bool ReportProgress::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportProgress::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportProgress::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportProgress::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& ReportProgress::clientid() const {
  return *clientid_;
}
inline void ReportProgress::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void ReportProgress::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void ReportProgress::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportProgress::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  return clientid_;
}
inline ::std::string* ReportProgress::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportProgress::set_allocated_clientid(::std::string* clientid) {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (clientid) {
    set_has_clientid();
    clientid_ = clientid;
  } else {
    clear_has_clientid();
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FileId = 2;
inline bool ReportProgress::has_fileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportProgress::set_has_fileid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportProgress::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportProgress::clear_fileid() {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    fileid_->clear();
  }
  clear_has_fileid();
}
inline const ::std::string& ReportProgress::fileid() const {
  return *fileid_;
}
inline void ReportProgress::set_fileid(const ::std::string& value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void ReportProgress::set_fileid(const char* value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void ReportProgress::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportProgress::mutable_fileid() {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  return fileid_;
}
inline ::std::string* ReportProgress::release_fileid() {
  clear_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fileid_;
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportProgress::set_allocated_fileid(::std::string* fileid) {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (fileid) {
    set_has_fileid();
    fileid_ = fileid;
  } else {
    clear_has_fileid();
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Percentage = 3;
inline bool ReportProgress::has_percentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportProgress::set_has_percentage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportProgress::clear_has_percentage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportProgress::clear_percentage() {
  percentage_ = 0;
  clear_has_percentage();
}
inline ::google::protobuf::int32 ReportProgress::percentage() const {
  return percentage_;
}
inline void ReportProgress::set_percentage(::google::protobuf::int32 value) {
  set_has_percentage();
  percentage_ = value;
}

// -------------------------------------------------------------------

// PublishResource

// required string ClientId = 1;
inline bool PublishResource::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishResource::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishResource::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishResource::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& PublishResource::clientid() const {
  return *clientid_;
}
inline void PublishResource::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void PublishResource::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void PublishResource::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishResource::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  return clientid_;
}
inline ::std::string* PublishResource::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PublishResource::set_allocated_clientid(::std::string* clientid) {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (clientid) {
    set_has_clientid();
    clientid_ = clientid;
  } else {
    clear_has_clientid();
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FileId = 2;
inline bool PublishResource::has_fileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishResource::set_has_fileid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishResource::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishResource::clear_fileid() {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    fileid_->clear();
  }
  clear_has_fileid();
}
inline const ::std::string& PublishResource::fileid() const {
  return *fileid_;
}
inline void PublishResource::set_fileid(const ::std::string& value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void PublishResource::set_fileid(const char* value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void PublishResource::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishResource::mutable_fileid() {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    fileid_ = new ::std::string;
  }
  return fileid_;
}
inline ::std::string* PublishResource::release_fileid() {
  clear_has_fileid();
  if (fileid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fileid_;
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PublishResource::set_allocated_fileid(::std::string* fileid) {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (fileid) {
    set_has_fileid();
    fileid_ = fileid;
  } else {
    clear_has_fileid();
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MessageReply

// required int32 ReturnCode = 1;
inline bool MessageReply::has_returncode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageReply::set_has_returncode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageReply::clear_has_returncode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageReply::clear_returncode() {
  returncode_ = 0;
  clear_has_returncode();
}
inline ::google::protobuf::int32 MessageReply::returncode() const {
  return returncode_;
}
inline void MessageReply::set_returncode(::google::protobuf::int32 value) {
  set_has_returncode();
  returncode_ = value;
}

// optional string Message = 2;
inline bool MessageReply::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageReply::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageReply::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageReply::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& MessageReply::message() const {
  return *message_;
}
inline void MessageReply::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void MessageReply::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void MessageReply::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageReply::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* MessageReply::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageReply::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TrackerProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tracker_2eproto__INCLUDED
