// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job_history.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "job_history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace JobHistory {

namespace {

const ::google::protobuf::Descriptor* FileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobHistoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobHistoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* History_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  History_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_job_5fhistory_2eproto() {
  protobuf_AddDesc_job_5fhistory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "job_history.proto");
  GOOGLE_CHECK(file != NULL);
  FileInfo_descriptor_ = file->message_type(0);
  static const int FileInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, filebit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, filebitcount_),
  };
  FileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInfo_descriptor_,
      FileInfo::default_instance_,
      FileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInfo));
  JobHistoryInfo_descriptor_ = file->message_type(1);
  static const int JobHistoryInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobHistoryInfo, torrentpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobHistoryInfo, localtoppath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobHistoryInfo, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobHistoryInfo, uploadtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobHistoryInfo, downloadtotal_),
  };
  JobHistoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobHistoryInfo_descriptor_,
      JobHistoryInfo::default_instance_,
      JobHistoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobHistoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobHistoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobHistoryInfo));
  History_descriptor_ = file->message_type(2);
  static const int History_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, jobinfo_),
  };
  History_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      History_descriptor_,
      History::default_instance_,
      History_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(History, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(History));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_job_5fhistory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInfo_descriptor_, &FileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobHistoryInfo_descriptor_, &JobHistoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    History_descriptor_, &History::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_job_5fhistory_2eproto() {
  delete FileInfo::default_instance_;
  delete FileInfo_reflection_;
  delete JobHistoryInfo::default_instance_;
  delete JobHistoryInfo_reflection_;
  delete History::default_instance_;
  delete History_reflection_;
}

void protobuf_AddDesc_job_5fhistory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021job_history.proto\022\nJobHistory\"i\n\010FileI"
    "nfo\022\016\n\006Fileid\030\001 \002(\t\022\024\n\014RelativePath\030\002 \002("
    "\t\022\020\n\010Filename\030\003 \002(\t\022\017\n\007FileBit\030\004 \003(\004\022\024\n\014"
    "FileBitCount\030\005 \002(\005\"\213\001\n\016JobHistoryInfo\022\023\n"
    "\013TorrentPath\030\001 \002(\t\022\024\n\014LocalTopPath\030\002 \002(\t"
    "\022\"\n\004File\030\003 \003(\0132\024.JobHistory.FileInfo\022\023\n\013"
    "UploadTotal\030\004 \002(\003\022\025\n\rDownloadTotal\030\005 \002(\003"
    "\"6\n\007History\022+\n\007JobInfo\030\001 \003(\0132\032.JobHistor"
    "y.JobHistoryInfo", 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "job_history.proto", &protobuf_RegisterTypes);
  FileInfo::default_instance_ = new FileInfo();
  JobHistoryInfo::default_instance_ = new JobHistoryInfo();
  History::default_instance_ = new History();
  FileInfo::default_instance_->InitAsDefaultInstance();
  JobHistoryInfo::default_instance_->InitAsDefaultInstance();
  History::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_job_5fhistory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_job_5fhistory_2eproto {
  StaticDescriptorInitializer_job_5fhistory_2eproto() {
    protobuf_AddDesc_job_5fhistory_2eproto();
  }
} static_descriptor_initializer_job_5fhistory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FileInfo::kFileidFieldNumber;
const int FileInfo::kRelativePathFieldNumber;
const int FileInfo::kFilenameFieldNumber;
const int FileInfo::kFileBitFieldNumber;
const int FileInfo::kFileBitCountFieldNumber;
#endif  // !_MSC_VER

FileInfo::FileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileInfo::InitAsDefaultInstance() {
}

FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileInfo::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filebitcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfo::~FileInfo() {
  SharedDtor();
}

void FileInfo::SharedDtor() {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    delete relativepath_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfo_descriptor_;
}

const FileInfo& FileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_5fhistory_2eproto();
  return *default_instance_;
}

FileInfo* FileInfo::default_instance_ = NULL;

FileInfo* FileInfo::New() const {
  return new FileInfo;
}

void FileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fileid()) {
      if (fileid_ != &::google::protobuf::internal::kEmptyString) {
        fileid_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
        relativepath_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    filebitcount_ = 0;
  }
  filebit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Fileid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RelativePath;
        break;
      }

      // required string RelativePath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RelativePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Filename;
        break;
      }

      // required string Filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FileBit;
        break;
      }

      // repeated uint64 FileBit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_filebit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_filebit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FileBit;
        if (input->ExpectTag(40)) goto parse_FileBitCount;
        break;
      }

      // required int32 FileBitCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileBitCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filebitcount_)));
          set_has_filebitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Fileid = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fileid(), output);
  }

  // required string RelativePath = 2;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->relativepath(), output);
  }

  // required string Filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // repeated uint64 FileBit = 4;
  for (int i = 0; i < this->filebit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->filebit(i), output);
  }

  // required int32 FileBitCount = 5;
  if (has_filebitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->filebitcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Fileid = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileid(), target);
  }

  // required string RelativePath = 2;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->relativepath(), target);
  }

  // required string Filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // repeated uint64 FileBit = 4;
  for (int i = 0; i < this->filebit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->filebit(i), target);
  }

  // required int32 FileBitCount = 5;
  if (has_filebitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->filebitcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Fileid = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

    // required string RelativePath = 2;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

    // required string Filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required int32 FileBitCount = 5;
    if (has_filebitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filebitcount());
    }

  }
  // repeated uint64 FileBit = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->filebit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->filebit(i));
    }
    total_size += 1 * this->filebit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  filebit_.MergeFrom(from.filebit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filebitcount()) {
      set_filebitcount(from.filebitcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(filename_, other->filename_);
    filebit_.Swap(&other->filebit_);
    std::swap(filebitcount_, other->filebitcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfo_descriptor_;
  metadata.reflection = FileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobHistoryInfo::kTorrentPathFieldNumber;
const int JobHistoryInfo::kLocalTopPathFieldNumber;
const int JobHistoryInfo::kFileFieldNumber;
const int JobHistoryInfo::kUploadTotalFieldNumber;
const int JobHistoryInfo::kDownloadTotalFieldNumber;
#endif  // !_MSC_VER

JobHistoryInfo::JobHistoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobHistoryInfo::InitAsDefaultInstance() {
}

JobHistoryInfo::JobHistoryInfo(const JobHistoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobHistoryInfo::SharedCtor() {
  _cached_size_ = 0;
  torrentpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  localtoppath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uploadtotal_ = GOOGLE_LONGLONG(0);
  downloadtotal_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobHistoryInfo::~JobHistoryInfo() {
  SharedDtor();
}

void JobHistoryInfo::SharedDtor() {
  if (torrentpath_ != &::google::protobuf::internal::kEmptyString) {
    delete torrentpath_;
  }
  if (localtoppath_ != &::google::protobuf::internal::kEmptyString) {
    delete localtoppath_;
  }
  if (this != default_instance_) {
  }
}

void JobHistoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobHistoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobHistoryInfo_descriptor_;
}

const JobHistoryInfo& JobHistoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_5fhistory_2eproto();
  return *default_instance_;
}

JobHistoryInfo* JobHistoryInfo::default_instance_ = NULL;

JobHistoryInfo* JobHistoryInfo::New() const {
  return new JobHistoryInfo;
}

void JobHistoryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_torrentpath()) {
      if (torrentpath_ != &::google::protobuf::internal::kEmptyString) {
        torrentpath_->clear();
      }
    }
    if (has_localtoppath()) {
      if (localtoppath_ != &::google::protobuf::internal::kEmptyString) {
        localtoppath_->clear();
      }
    }
    uploadtotal_ = GOOGLE_LONGLONG(0);
    downloadtotal_ = GOOGLE_LONGLONG(0);
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobHistoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TorrentPath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_torrentpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->torrentpath().data(), this->torrentpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LocalTopPath;
        break;
      }

      // required string LocalTopPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LocalTopPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localtoppath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localtoppath().data(), this->localtoppath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_File;
        break;
      }

      // repeated .JobHistory.FileInfo File = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_File:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_File;
        if (input->ExpectTag(32)) goto parse_UploadTotal;
        break;
      }

      // required int64 UploadTotal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UploadTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uploadtotal_)));
          set_has_uploadtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DownloadTotal;
        break;
      }

      // required int64 DownloadTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DownloadTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &downloadtotal_)));
          set_has_downloadtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobHistoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string TorrentPath = 1;
  if (has_torrentpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->torrentpath().data(), this->torrentpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->torrentpath(), output);
  }

  // required string LocalTopPath = 2;
  if (has_localtoppath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localtoppath().data(), this->localtoppath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->localtoppath(), output);
  }

  // repeated .JobHistory.FileInfo File = 3;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->file(i), output);
  }

  // required int64 UploadTotal = 4;
  if (has_uploadtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uploadtotal(), output);
  }

  // required int64 DownloadTotal = 5;
  if (has_downloadtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->downloadtotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobHistoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string TorrentPath = 1;
  if (has_torrentpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->torrentpath().data(), this->torrentpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->torrentpath(), target);
  }

  // required string LocalTopPath = 2;
  if (has_localtoppath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localtoppath().data(), this->localtoppath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localtoppath(), target);
  }

  // repeated .JobHistory.FileInfo File = 3;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->file(i), target);
  }

  // required int64 UploadTotal = 4;
  if (has_uploadtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uploadtotal(), target);
  }

  // required int64 DownloadTotal = 5;
  if (has_downloadtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->downloadtotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobHistoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TorrentPath = 1;
    if (has_torrentpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->torrentpath());
    }

    // required string LocalTopPath = 2;
    if (has_localtoppath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localtoppath());
    }

    // required int64 UploadTotal = 4;
    if (has_uploadtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uploadtotal());
    }

    // required int64 DownloadTotal = 5;
    if (has_downloadtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->downloadtotal());
    }

  }
  // repeated .JobHistory.FileInfo File = 3;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobHistoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobHistoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobHistoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobHistoryInfo::MergeFrom(const JobHistoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_torrentpath()) {
      set_torrentpath(from.torrentpath());
    }
    if (from.has_localtoppath()) {
      set_localtoppath(from.localtoppath());
    }
    if (from.has_uploadtotal()) {
      set_uploadtotal(from.uploadtotal());
    }
    if (from.has_downloadtotal()) {
      set_downloadtotal(from.downloadtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobHistoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobHistoryInfo::CopyFrom(const JobHistoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobHistoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  for (int i = 0; i < file_size(); i++) {
    if (!this->file(i).IsInitialized()) return false;
  }
  return true;
}

void JobHistoryInfo::Swap(JobHistoryInfo* other) {
  if (other != this) {
    std::swap(torrentpath_, other->torrentpath_);
    std::swap(localtoppath_, other->localtoppath_);
    file_.Swap(&other->file_);
    std::swap(uploadtotal_, other->uploadtotal_);
    std::swap(downloadtotal_, other->downloadtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobHistoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobHistoryInfo_descriptor_;
  metadata.reflection = JobHistoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int History::kJobInfoFieldNumber;
#endif  // !_MSC_VER

History::History()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void History::InitAsDefaultInstance() {
}

History::History(const History& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void History::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

History::~History() {
  SharedDtor();
}

void History::SharedDtor() {
  if (this != default_instance_) {
  }
}

void History::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* History::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return History_descriptor_;
}

const History& History::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_5fhistory_2eproto();
  return *default_instance_;
}

History* History::default_instance_ = NULL;

History* History::New() const {
  return new History;
}

void History::Clear() {
  jobinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool History::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .JobHistory.JobHistoryInfo JobInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JobInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jobinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_JobInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void History::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .JobHistory.JobHistoryInfo JobInfo = 1;
  for (int i = 0; i < this->jobinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jobinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* History::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .JobHistory.JobHistoryInfo JobInfo = 1;
  for (int i = 0; i < this->jobinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jobinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int History::ByteSize() const {
  int total_size = 0;

  // repeated .JobHistory.JobHistoryInfo JobInfo = 1;
  total_size += 1 * this->jobinfo_size();
  for (int i = 0; i < this->jobinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jobinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void History::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const History* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const History*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void History::MergeFrom(const History& from) {
  GOOGLE_CHECK_NE(&from, this);
  jobinfo_.MergeFrom(from.jobinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void History::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void History::CopyFrom(const History& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool History::IsInitialized() const {

  for (int i = 0; i < jobinfo_size(); i++) {
    if (!this->jobinfo(i).IsInitialized()) return false;
  }
  return true;
}

void History::Swap(History* other) {
  if (other != this) {
    jobinfo_.Swap(&other->jobinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata History::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = History_descriptor_;
  metadata.reflection = History_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace JobHistory

// @@protoc_insertion_point(global_scope)
