// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ClientProto {

namespace {

const ::google::protobuf::Descriptor* FileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShakeHand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShakeHand_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  FileInfo_descriptor_ = file->message_type(0);
  static const int FileInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, hasfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, filebit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, filebitcount_),
  };
  FileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInfo_descriptor_,
      FileInfo::default_instance_,
      FileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInfo));
  ShakeHand_descriptor_ = file->message_type(1);
  static const int ShakeHand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeHand, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeHand, info_),
  };
  ShakeHand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShakeHand_descriptor_,
      ShakeHand::default_instance_,
      ShakeHand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeHand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeHand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShakeHand));
  UploadRequest_descriptor_ = file->message_type(2);
  static const int UploadRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, chunknumber_),
  };
  UploadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadRequest_descriptor_,
      UploadRequest::default_instance_,
      UploadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadRequest));
  UploadReply_descriptor_ = file->message_type(3);
  static const int UploadReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadReply, returncode_),
  };
  UploadReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadReply_descriptor_,
      UploadReply::default_instance_,
      UploadReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInfo_descriptor_, &FileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShakeHand_descriptor_, &ShakeHand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadRequest_descriptor_, &UploadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadReply_descriptor_, &UploadReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete FileInfo::default_instance_;
  delete FileInfo_reflection_;
  delete ShakeHand::default_instance_;
  delete ShakeHand_reflection_;
  delete UploadRequest::default_instance_;
  delete UploadRequest_reflection_;
  delete UploadReply::default_instance_;
  delete UploadReply_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022\013ClientProto\"f\n\010FileInfo\022"
    "\016\n\006FileId\030\001 \002(\t\022\017\n\007HasFile\030\002 \002(\005\022\022\n\nPerc"
    "entage\030\003 \002(\005\022\017\n\007FileBit\030\004 \003(\004\022\024\n\014FileBit"
    "Count\030\005 \002(\005\"B\n\tShakeHand\022\020\n\010ClientId\030\001 \002"
    "(\t\022#\n\004Info\030\002 \002(\0132\025.ClientProto.FileInfo\""
    "F\n\rUploadRequest\022\020\n\010ClientId\030\001 \002(\t\022\016\n\006Fi"
    "leId\030\002 \002(\t\022\023\n\013ChunkNumber\030\003 \002(\003\"!\n\013Uploa"
    "dReply\022\022\n\nReturnCode\030\001 \002(\005", 306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  FileInfo::default_instance_ = new FileInfo();
  ShakeHand::default_instance_ = new ShakeHand();
  UploadRequest::default_instance_ = new UploadRequest();
  UploadReply::default_instance_ = new UploadReply();
  FileInfo::default_instance_->InitAsDefaultInstance();
  ShakeHand::default_instance_->InitAsDefaultInstance();
  UploadRequest::default_instance_->InitAsDefaultInstance();
  UploadReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FileInfo::kFileIdFieldNumber;
const int FileInfo::kHasFileFieldNumber;
const int FileInfo::kPercentageFieldNumber;
const int FileInfo::kFileBitFieldNumber;
const int FileInfo::kFileBitCountFieldNumber;
#endif  // !_MSC_VER

FileInfo::FileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileInfo::InitAsDefaultInstance() {
}

FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileInfo::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasfile_ = 0;
  percentage_ = 0;
  filebitcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfo::~FileInfo() {
  SharedDtor();
}

void FileInfo::SharedDtor() {
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (this != default_instance_) {
  }
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfo_descriptor_;
}

const FileInfo& FileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

FileInfo* FileInfo::default_instance_ = NULL;

FileInfo* FileInfo::New() const {
  return new FileInfo;
}

void FileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fileid()) {
      if (fileid_ != &::google::protobuf::internal::kEmptyString) {
        fileid_->clear();
      }
    }
    hasfile_ = 0;
    percentage_ = 0;
    filebitcount_ = 0;
  }
  filebit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HasFile;
        break;
      }

      // required int32 HasFile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasfile_)));
          set_has_hasfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Percentage;
        break;
      }

      // required int32 Percentage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentage_)));
          set_has_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FileBit;
        break;
      }

      // repeated uint64 FileBit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_filebit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_filebit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FileBit;
        if (input->ExpectTag(40)) goto parse_FileBitCount;
        break;
      }

      // required int32 FileBitCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileBitCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filebitcount_)));
          set_has_filebitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fileid(), output);
  }

  // required int32 HasFile = 2;
  if (has_hasfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hasfile(), output);
  }

  // required int32 Percentage = 3;
  if (has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percentage(), output);
  }

  // repeated uint64 FileBit = 4;
  for (int i = 0; i < this->filebit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->filebit(i), output);
  }

  // required int32 FileBitCount = 5;
  if (has_filebitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->filebitcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileid(), target);
  }

  // required int32 HasFile = 2;
  if (has_hasfile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hasfile(), target);
  }

  // required int32 Percentage = 3;
  if (has_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percentage(), target);
  }

  // repeated uint64 FileBit = 4;
  for (int i = 0; i < this->filebit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->filebit(i), target);
  }

  // required int32 FileBitCount = 5;
  if (has_filebitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->filebitcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FileId = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

    // required int32 HasFile = 2;
    if (has_hasfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasfile());
    }

    // required int32 Percentage = 3;
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentage());
    }

    // required int32 FileBitCount = 5;
    if (has_filebitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filebitcount());
    }

  }
  // repeated uint64 FileBit = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->filebit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->filebit(i));
    }
    total_size += 1 * this->filebit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  filebit_.MergeFrom(from.filebit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_hasfile()) {
      set_hasfile(from.hasfile());
    }
    if (from.has_percentage()) {
      set_percentage(from.percentage());
    }
    if (from.has_filebitcount()) {
      set_filebitcount(from.filebitcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(hasfile_, other->hasfile_);
    std::swap(percentage_, other->percentage_);
    filebit_.Swap(&other->filebit_);
    std::swap(filebitcount_, other->filebitcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfo_descriptor_;
  metadata.reflection = FileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShakeHand::kClientIdFieldNumber;
const int ShakeHand::kInfoFieldNumber;
#endif  // !_MSC_VER

ShakeHand::ShakeHand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShakeHand::InitAsDefaultInstance() {
  info_ = const_cast< ::ClientProto::FileInfo*>(&::ClientProto::FileInfo::default_instance());
}

ShakeHand::ShakeHand(const ShakeHand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShakeHand::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShakeHand::~ShakeHand() {
  SharedDtor();
}

void ShakeHand::SharedDtor() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void ShakeHand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeHand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShakeHand_descriptor_;
}

const ShakeHand& ShakeHand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

ShakeHand* ShakeHand::default_instance_ = NULL;

ShakeHand* ShakeHand::New() const {
  return new ShakeHand;
}

void ShakeHand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::kEmptyString) {
        clientid_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::ClientProto::FileInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShakeHand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ClientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Info;
        break;
      }

      // required .ClientProto.FileInfo Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShakeHand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ClientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientid(), output);
  }

  // required .ClientProto.FileInfo Info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShakeHand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ClientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required .ClientProto.FileInfo Info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShakeHand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ClientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // required .ClientProto.FileInfo Info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeHand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShakeHand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShakeHand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShakeHand::MergeFrom(const ShakeHand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_info()) {
      mutable_info()->::ClientProto::FileInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShakeHand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeHand::CopyFrom(const ShakeHand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeHand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ShakeHand::Swap(ShakeHand* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShakeHand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShakeHand_descriptor_;
  metadata.reflection = ShakeHand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadRequest::kClientIdFieldNumber;
const int UploadRequest::kFileIdFieldNumber;
const int UploadRequest::kChunkNumberFieldNumber;
#endif  // !_MSC_VER

UploadRequest::UploadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadRequest::InitAsDefaultInstance() {
}

UploadRequest::UploadRequest(const UploadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadRequest::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chunknumber_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadRequest::~UploadRequest() {
  SharedDtor();
}

void UploadRequest::SharedDtor() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (this != default_instance_) {
  }
}

void UploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadRequest_descriptor_;
}

const UploadRequest& UploadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

UploadRequest* UploadRequest::default_instance_ = NULL;

UploadRequest* UploadRequest::New() const {
  return new UploadRequest;
}

void UploadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::kEmptyString) {
        clientid_->clear();
      }
    }
    if (has_fileid()) {
      if (fileid_ != &::google::protobuf::internal::kEmptyString) {
        fileid_->clear();
      }
    }
    chunknumber_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ClientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileId;
        break;
      }

      // required string FileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChunkNumber;
        break;
      }

      // required int64 ChunkNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChunkNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunknumber_)));
          set_has_chunknumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ClientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientid(), output);
  }

  // required string FileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fileid(), output);
  }

  // required int64 ChunkNumber = 3;
  if (has_chunknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->chunknumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ClientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required string FileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fileid(), target);
  }

  // required int64 ChunkNumber = 3;
  if (has_chunknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->chunknumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ClientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // required string FileId = 2;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

    // required int64 ChunkNumber = 3;
    if (has_chunknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunknumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadRequest::MergeFrom(const UploadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_chunknumber()) {
      set_chunknumber(from.chunknumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UploadRequest::Swap(UploadRequest* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(fileid_, other->fileid_);
    std::swap(chunknumber_, other->chunknumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadRequest_descriptor_;
  metadata.reflection = UploadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadReply::kReturnCodeFieldNumber;
#endif  // !_MSC_VER

UploadReply::UploadReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadReply::InitAsDefaultInstance() {
}

UploadReply::UploadReply(const UploadReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadReply::SharedCtor() {
  _cached_size_ = 0;
  returncode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadReply::~UploadReply() {
  SharedDtor();
}

void UploadReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadReply_descriptor_;
}

const UploadReply& UploadReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

UploadReply* UploadReply::default_instance_ = NULL;

UploadReply* UploadReply::New() const {
  return new UploadReply;
}

void UploadReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returncode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ReturnCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returncode_)));
          set_has_returncode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ReturnCode = 1;
  if (has_returncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returncode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ReturnCode = 1;
  if (has_returncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returncode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ReturnCode = 1;
    if (has_returncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returncode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadReply::MergeFrom(const UploadReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returncode()) {
      set_returncode(from.returncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadReply::CopyFrom(const UploadReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UploadReply::Swap(UploadReply* other) {
  if (other != this) {
    std::swap(returncode_, other->returncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadReply_descriptor_;
  metadata.reflection = UploadReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientProto

// @@protoc_insertion_point(global_scope)
